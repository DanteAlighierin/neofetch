#!/usr/local/bin/python3

import socket
import os
import subprocess

def local_ip():
	try:
		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		s.connect(("8.8.8.8", 80))
		return s.getsockname()[0]
	except:
		return None



def host_name():
	try:
		return socket.gethostname()
	except:
		return None

def os_version():
	
	try:
		return os.uname()

	except:
		return None

def model():
	try:
		os.system("/usr/sbin/system_profiler SPHardwareDataType | grep 'Model Identifier' > .tmp.txt")

		with open(".tmp.txt", "r") as f:
			for info in f:
				return info.strip()[18:]
	except:
		return None

def screen_size():
	try:
		os.system("/usr/sbin/system_profiler SPDisplaysDataType |grep Resolution > .tmp.txt")

		with open(".tmp.txt", "r") as f:
			for info in f:
				return info.strip()[12:]
	except:
		return None

"""def uptime():
	try:
		os.system("uptime | grep 'Time since boot:' > .tmp.txt")

		with open(".tmp.txt", "r") as f:
			for info in f:
				return info.strip()[17:]
	except:
		return None"""


def uptime():
	try:
		os.uptime()
	except:
		return None

def shell():
	try:
		return os.environ.get('SHELL', 'bashd')
	except:
		return None

def kernel():
    os.system("uname -a  > .tmp.txt")

    with open(".tmp.txt", "r") as f:
        for info in f:
            return info.strip()[61:67]


def battery_percentage():
	try:
		os.system('pmset -g batt | grep -Eo "\d+%" > .tmp.txt')

		with open(".tmp.txt", "r") as f:
			for info in f:
				return info.strip()
	except:
		return None

def cpu_spec():
	try:
		
		return os.getpid()


	


	except:
		return None


def SSID():
	try:
		os.system("/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}' > .tmp.txt")

		with open(".tmp.txt", "r") as f:
			for info in f:
				return info.strip()

	except:
		return None

TEMPLATE = """
                                     {hostname} 
                                            {hostname_sep}
                                                         OS: {os_version}
  MMMMMMMMMMMMMMMMMMMMMMMMMmds+.                         Kernel: {kernel}
MMm----::-://////////////oymNMd+`                        Model: {model}
MMd      /++                -sNMd:                       Shell: {shell}
MMNso/`  dMM    `.::-. .-::.` .hMN:                      Uptime: {uptime}
ddddMMh  dMM   :hNMNMNhNMNMNh: `NMm                      Resolution: {size}
    NMm  dMM  .NMN/-+MMM+-/NMN` dMM                      CPU: {cpu}
    NMm  dMM  -MMm  `MMM   dMM. dMM                      Local IP: {local_ip}
    NMm  dMM  -MMm  `MMM   dMM. dMM                      Battery: {battery_percentage}
    NMm  dMM  -MMm  'MMM'  dMM. dMM
    NMm  dMM  .mmd  `mmm   yMM. dMM    
    NMm  dMM`  mmd   mmm   ydm. dMM   
    hMM- +MMd/-------...-:sdds  dMM   
    -NMm- :hNMNNNmdddddddddy/`  dMM   
     -dMNs-``-::::-------.``    dMM   
      `/dMNmy+/:-------------:/yMMM   
         ./ydNMMMMMMMMMMMMMMMMMMMMM  
            .MMMMMMMMMMMMMMMMMMM                                                         
                                                        
                                                         
                                                         
                                                         
                                                         
                                                        
                                                         
"""


print(TEMPLATE.format(hostname = host_name(),
	hostname_sep = "-" * len(host_name()),
	os_version=os_version(),
	kernel=kernel(),
	model=model(),
	shell=shell(),
	uptime=uptime(),
	size=screen_size(),
	cpu=cpu_spec(),
	local_ip=local_ip(),
	battery_percentage=battery_percentage(),
	ssid=SSID()))

os.system("rm -rf .tmp.txt")


